// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// ../../assets/words/normal.csv
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AssetsWordsNormalCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x57\xdb\x92\xe2\x38\x90\x7d\x27\x82\x7f\xe8\x5f\xe9\xa6\xaa\xa0\xbb\x80\x62\xb1\xa7\x88\xd9\xb7\xb4\x48\xb0\x06\x59\xe9\xd1\xa5\x68\xf6\xeb\x37\xce\x11\x3d\x2f\x79\x52\xb2\x2e\xa9\xbc\xfb\xbb\x4f\xcb\xc5\x77\x9f\xe6\x20\x51\x97\x8b\xef\xc1\xd9\x68\x01\x8c\xd7\xb8\x5c\x7c\x9f\x86\x1a\x24\x3a\x7c\x8a\x6e\x34\x2c\x8e\x45\x83\xcd\x98\x99\xe7\x00\x48\xc9\xee\x80\xb2\x5c\x7c\xcf\x25\x99\x3f\x3f\x99\x28\xf5\x3a\x96\xe5\xe2\x87\x0c\x0f\xd0\x2b\x48\x08\x8d\x6a\xf2\x51\xc0\x46\x79\xe2\x3f\x06\x48\x24\x91\x34\x29\x17\x67\x1d\x9e\xdb\xf2\x4d\xcb\x1f\x9e\x07\x97\x71\xb9\xf8\xa1\xe2\xfe\xc0\xf3\xa3\x4a\x24\x4d\xa4\x5f\x4a\x3c\x83\x28\x09\xc7\x6d\x65\x08\x8f\xa1\x96\x62\xdc\x10\x70\xa8\xbf\x61\x51\x10\x77\x9b\xc4\x07\xb2\xe7\x36\x13\x6f\x8a\x05\x26\xe9\x4c\xe0\x60\x1a\x40\xa1\xbd\x1f\x66\x37\xd0\x52\x02\x47\x77\x12\x9c\x60\xbf\x97\x8b\x1f\x49\x9c\x06\x1e\x90\xc4\x47\x42\xa4\xe0\x49\x05\xe7\x25\x3f\x60\x5b\xaa\x19\x93\x75\x18\x82\x66\x30\xae\xdd\x5a\x2f\x17\x2d\x64\xa0\xc7\x9a\x92\x2f\x50\x58\xe5\x9a\xec\xa3\x66\x72\xa5\x68\xba\x84\x47\x63\xf1\xaa\x95\xb8\x82\x45\x2b\xc1\xbb\x56\x12\x34\x9e\xa1\x98\x95\x4c\x76\x09\x72\xad\x9c\x9d\x66\xf1\xd7\xd8\x38\xe5\xd7\x78\x0e\xda\xf0\xf1\x4d\x9a\xa9\x57\x12\x8d\x30\x17\xbe\x60\xd5\xce\x81\x36\x56\x92\x66\x88\xb9\x92\x94\x8c\x98\x4b\xdb\x82\xc1\x28\xe1\x06\x50\x4d\x41\xe5\xcc\x0b\x46\xd5\xac\xc4\x0b\x69\x4a\x0f\x22\x9e\xb1\x1a\xbd\xbb\xc1\x01\x57\xa3\x0f\x38\x7d\x34\x67\x41\x0a\xd7\xdb\x9c\x8b\x77\x37\x2c\xf3\x57\x4a\xe0\x63\x94\x89\x6f\xf5\xc9\xf1\xad\xc1\xe4\x46\x70\x0d\x32\x65\x0b\x06\x7f\x21\x68\x5b\x55\xcf\x84\x3b\xf6\xd2\x9e\x2b\xbb\x5c\xe0\x24\x2b\x0b\x81\x67\xd3\xbe\x2b\x9b\xe6\x5a\x28\xb6\x45\xa7\x89\x0b\xed\xe6\xb9\x30\x49\x20\xdc\x48\x79\x12\x34\xff\xcd\x41\x75\x18\x55\x58\x79\x05\x77\x58\xd9\x7d\x30\xcc\x25\x19\x48\x29\x5e\x6a\x0f\x4b\xbe\x59\x7a\x95\x6c\x26\xbd\x43\xb8\x54\x7d\xd6\x3c\x7a\x4c\xd5\xd9\x35\x23\xd6\xf4\x34\x40\x2d\xcb\xc5\x8b\xf8\xfc\x00\x40\x32\x20\x06\xf4\xf1\x17\x8d\xc5\x67\x2c\xd1\x4c\xa1\x5f\x34\x3f\x19\x0f\x85\x9d\xc1\x28\x87\xd1\xb2\x54\x6c\xf1\xed\x73\x76\xb6\x5c\xbc\x98\x2b\x88\xf9\x17\xbb\x92\x8c\x56\x61\xb2\x97\xa7\x6e\x5e\x2c\xde\x14\x97\x59\x5b\x64\xe9\x16\x6d\x00\x87\x23\x92\xdc\x29\x43\xa2\x45\x5f\x2a\xe4\x78\xc5\xb6\x57\x49\x53\xbd\x5c\x32\xb9\x39\xd4\x6b\xe3\xca\xf8\x6f\xe5\xeb\x5e\xc3\x00\x5d\xbd\x06\x75\x25\x79\xe7\xcb\x83\x83\x79\x94\x58\xc8\x7d\x09\xa5\x7a\x8d\x57\x8f\xb0\x6b\xa8\x9c\xf9\x7a\xe6\xa6\xd7\xf8\xe5\x93\xc5\x49\xb9\xe5\xb7\x26\xe7\x21\xf9\xeb\xef\x39\x58\xf6\x70\x95\xd7\x87\x92\x0c\xcc\x5e\x6f\x32\x24\xef\x80\x48\x88\x6f\x92\x26\x25\x56\x07\xf5\xbc\xa9\x94\x91\x13\xca\x5c\xf8\xe6\xe3\x95\x43\x9f\x38\x42\xc0\xbe\x05\x99\x7c\xbc\x1a\x38\xbb\x6b\xca\x60\x2a\x0c\xfb\x66\x32\x81\xda\x99\xb4\x34\xda\x32\xd5\x9b\x25\xcd\x9c\x81\xfb\xbc\x59\x22\x9f\xb3\xe7\xb7\xdf\xcb\xc5\x5b\x92\x09\x67\x24\x75\xb7\x40\xc6\x9f\xaf\x0d\xf3\xa0\x64\x60\x9c\xb7\x54\x3d\xb6\xd6\x78\x85\xff\xbf\xc1\x94\x6b\xee\xfc\x43\x93\x5c\x1b\x0e\x7f\x98\x33\x02\x6c\x2d\x29\xe0\xe1\x6b\xfa\xe0\xfa\xf9\xb0\x75\x10\x18\x8d\xa0\x64\x7c\x29\xed\x83\x21\x49\xad\x03\xb2\xc6\xda\xe0\xf9\x6b\xbb\x5e\x99\xa9\xd6\x86\x50\x5d\x5b\xb8\x80\x1a\xf4\xbd\x4e\x32\x8f\x04\x1e\x97\x3c\xde\xbc\x4e\xe6\x34\x3d\xbe\xe5\x62\x50\xdf\xba\x32\x81\xac\xab\x2f\xf0\x8e\x75\x85\x54\x8f\x69\xb9\xd8\xd0\x16\x1b\x99\x68\x8b\x8d\xc0\x5d\x37\xd2\x04\xdc\x48\x9a\x2c\x7a\x27\x64\x67\xd0\x02\x72\xbf\x2d\x17\x1b\x95\xf3\x3c\x5a\x84\x4c\x1b\x95\x80\x98\xdf\xa8\x40\xb5\x1b\x0d\x13\x0c\xba\xa1\x20\x1b\x73\xf4\xdf\x8d\x41\xb3\x1b\x1a\x68\x63\x08\xbe\x8d\xa5\xcc\xa9\x27\x9d\x7d\x11\x6e\x28\x4a\x60\x18\x6c\x90\x83\x9d\xd0\x07\x37\x35\x0f\x14\xf0\x27\xfc\xe3\xa7\xd3\x7c\x93\x02\x01\x7e\x5e\x83\xd9\x72\xf1\x33\xde\x40\x8a\xa6\x88\xfb\x7f\xb1\xb0\xfc\xc2\x7b\x7f\xe9\x1d\x67\x12\x90\x01\x7f\x59\x4d\x51\x02\xc3\xf6\x1d\xd2\xbd\xeb\x63\x68\x15\xe7\xdd\x93\xc4\xeb\x72\xf1\x1e\x61\xfb\xf7\xe8\x2f\x0d\x58\x67\xdf\x23\x9c\x6b\x2b\x10\x61\xcb\x50\xda\xca\x34\x37\x9a\x47\x16\xb1\xad\xcc\xc5\x38\x95\xa1\xc6\xad\x20\xf3\x6d\xe5\xfe\xe0\x48\xe5\x42\x0a\x7f\xde\x2a\x33\xea\x56\x9b\xe1\xb7\xb8\x62\xa8\x61\x78\xb2\xff\xcd\x65\x20\x5c\x6c\xcb\xb0\xda\xfa\x96\x9d\xc1\xe1\x09\x5b\x66\x60\x50\xe5\xe8\x4a\x02\x8f\xdb\x5a\x69\x3b\x6a\x44\x06\xd8\x09\x67\x77\xd4\x0c\xe8\x00\xf7\xdf\xc9\x0c\x92\x6e\xb8\x8f\x58\x80\xb9\x68\x9a\xbd\xe2\xa1\x3b\x3d\x7b\x69\xe0\x68\x0a\x70\x45\xda\xd9\x3b\xc5\x53\x76\xde\x25\xa3\x47\x3c\xf9\xbb\x7c\x91\x0d\x70\xb9\x07\xb9\x5b\xa3\x79\xa4\xde\x76\x1e\x79\x63\xe7\x53\x42\xa2\xd9\xc1\xf9\x23\x64\xa4\x87\xef\x2c\xc2\x2e\x3b\xe3\x0d\x96\xf9\x81\x1e\xb1\xb3\x2f\x94\x84\x1d\x2a\xf4\xae\x66\x17\x38\xc8\x78\xd7\x9e\xef\xda\xcb\x7c\x43\xde\xde\x4b\xa9\xf0\xfd\x3d\xa2\x9a\xf6\xda\xab\xb2\xde\xee\xd5\x5f\xc7\xc1\xd2\x48\x6f\xdc\xe3\xb9\x7b\xdf\x42\x7f\xdf\xac\xbc\x37\x6b\x2b\xe9\x9c\x7b\x2b\x4f\x3a\xb0\xfb\xd8\x57\x7a\xee\x87\x63\x0b\xf4\xe1\x8a\xcd\x48\x08\x1f\x97\x8b\xc7\x35\x1f\x90\xe2\x23\x52\x39\x1f\x09\xc1\x04\x74\xa3\xe6\x92\x64\xb9\xf8\xa8\x85\x1d\xca\x47\x2d\xd9\xc3\x5f\x3e\xbe\x90\x24\x3e\xd0\xc4\x7c\x3c\x32\xad\x7e\x60\xfe\x38\x08\x55\x44\xa0\x47\x1e\x70\xdf\x41\x22\x1c\xe2\x20\x39\xb7\x55\x2a\x29\x00\x22\x89\xf3\x6d\x70\xad\xbe\x4d\xc4\x07\x60\x66\xc7\x71\xd0\x94\x21\xd6\xa1\x19\xea\x30\x1a\xfa\x1b\xc2\x15\x69\x04\x4b\xbd\x44\xcc\x79\xdc\xe7\x43\x40\xe6\x3e\xf8\xa8\xcf\xf6\x04\x6c\x49\x4a\xae\xd5\xd4\x03\xda\xda\xd2\xb0\x01\x67\x9f\xde\x78\x30\x9d\x40\xe9\x5c\x07\x0b\xbe\x78\xe7\xf9\x0c\x96\xc6\x83\xa1\x13\x3e\xd8\xec\x58\xd5\x0f\x96\x73\xe5\xfa\x5c\xbe\xd9\x53\x9f\x18\xb4\xdd\x77\x76\x35\x87\xa4\x50\x1c\x2f\x4b\x5a\xfe\x0f\xa1\x7d\x48\x3e\xb6\x45\xc9\xb7\x17\x26\xfb\x47\x5b\x65\x3d\xd4\xf3\xb9\xa9\xaf\xd9\xed\x7f\xaa\x24\xae\x6d\x4c\x01\xa3\xd0\xde\x51\x86\x01\x19\xfe\x48\x6f\x39\x4a\x7b\xc1\x51\x2e\xa4\x9e\x2b\xd8\x4d\x1e\x91\x08\x8f\x3a\xb3\x94\x1c\x35\x17\xa9\x89\x8f\x3f\xea\x9d\x59\xe4\x38\x7a\x28\xf1\x48\xf9\x8f\xbc\xfc\xe8\xd9\x22\x1f\x0d\x7d\xe8\x91\x11\x7b\x7c\xea\xe8\x68\x67\xc5\x6a\x43\xc7\xfe\x27\xa9\x1d\xcd\x2e\xa0\xa8\xb4\x47\x63\x85\x38\xc2\xe7\x8f\x35\xe0\x9c\x8e\xd1\x0b\x39\x3a\x09\x38\xb2\x93\x90\x85\xc0\xb9\xc8\xa9\xfb\x72\xd1\x39\x64\x40\xd0\x0b\xc0\xb7\xea\x4a\xa6\xf5\x2d\x9d\xf3\x39\x1b\x6a\x69\xe7\xac\xe0\x79\x9d\x4b\x8a\x9d\x2a\x24\x79\x64\x1b\xdf\x29\xba\xfb\x6e\x94\x33\x5c\xa2\x1b\x05\xd5\xb4\x1b\xd9\xcb\x74\x23\x7a\xd6\x6e\x44\xda\xeb\x46\x6b\x33\x35\xd0\x5c\xdd\x68\xf7\x86\xc9\x4f\xfc\x9e\xea\xb0\x5c\x74\xfe\xac\x77\xb6\xac\x9d\x0f\x54\x4d\x77\x43\xeb\x0e\xe3\x75\x81\x57\x05\x86\x47\x17\x3c\x9c\x17\xf2\x05\x28\xa0\x8b\x0c\xf3\x2e\x32\x8b\x74\x91\xd2\x18\x72\x58\x67\x8e\xdd\x59\x67\xec\x5c\x3b\x0b\x67\xdf\xc6\x15\x5f\x67\x9a\x95\xd0\x7a\xbd\x6e\xf6\x6d\xc6\x47\xfe\xdd\x74\x33\xd3\x4d\x07\xbb\x62\xff\x9c\x7c\xbc\x35\x6d\x3f\x59\xce\x3e\x96\x8b\xee\xdf\xea\xdb\x9f\x53\x57\xc4\x53\xb6\xc2\x32\xd0\xb1\xbe\x82\x5e\xd8\xb1\x74\x45\x0a\xca\x78\x57\x9e\x91\xd9\x15\x4b\x53\x83\x07\xe1\x8b\x5f\x13\x4d\x55\x12\x5d\x05\x38\x73\xba\xf2\xcc\xea\x8b\x13\x78\x6e\x87\xba\xdd\xd5\x98\x5d\xa2\xc3\x82\x1d\x99\x90\xbb\x8a\xf0\x6c\xad\x58\x57\xd3\xe5\x59\xcd\xba\x9a\xae\xca\x8b\xee\x2a\xf4\xf9\xee\xee\x69\xe3\x5e\x06\x84\x73\x2f\xe8\x41\x7b\x6a\xb4\x17\x5c\xda\xc3\xea\xbd\x8a\x83\xce\x7a\x55\x54\xf6\x5e\x83\x66\x67\xed\x73\x8c\x3e\x13\xcb\x72\xd1\x8f\x0c\xdb\x7e\x6c\xbf\x57\xfd\x58\x23\x6d\xde\xfb\x6b\x03\xde\xc1\xd2\xd5\xfb\x9c\xa1\x89\xde\xa4\x85\x73\x6f\x9e\x79\xb0\xb7\x49\x90\x85\x7a\xa6\x82\xde\xe6\x51\x38\x9b\xa2\x9c\x39\xcd\xda\xdd\xa7\x26\x23\x2e\x9a\xd8\x59\x80\xcd\xcc\xf0\x3d\xf3\x11\xe8\xb3\x79\xee\x13\xab\x63\x9f\x6c\x1a\x98\xe8\xfa\x54\xdb\x44\x9d\xf8\x07\xd5\xa7\x8a\x66\xa1\x87\x23\xf6\x15\xdd\x56\xff\xb9\x5c\xf4\x77\x24\xbd\xbf\xa2\x6f\xc9\xe8\xaf\xe8\x2f\x34\xd6\xa7\xb8\x56\xf6\x3e\x91\xb8\x3e\xf9\xf2\x4f\xcf\x98\xfd\xf4\x16\x5a\x44\x81\x43\x8a\xf8\xf4\x05\x4d\xea\x72\x71\x92\x10\x66\x61\xda\x3d\x31\x1c\x4f\x42\xcd\x9f\x9a\x21\x4e\xfa\xcc\x4a\x27\xd5\x73\x06\xb4\xd2\x73\x1a\x15\xef\x3d\x8d\x3e\xb3\x71\x3a\xb1\xfd\x38\x79\x9e\xe0\x23\x83\xef\x44\x69\x4e\xec\x8c\x4f\x2c\x62\x27\x4b\x37\xc3\x8f\xca\x29\x29\x7f\xd8\x4f\xe8\x79\xe9\xbb\xa7\xff\x5c\xf7\x6f\xfe\xf3\xff\x6d\x57\x59\x2e\xfe\x57\x87\x24\xff\x1f\x00\x00\xff\xff\x9d\x22\x99\x03\x9a\x10\x00\x00")

func AssetsWordsNormalCsvBytes() ([]byte, error) {
	return bindataRead(
		_AssetsWordsNormalCsv,
		"../../assets/words/normal.csv",
	)
}

func AssetsWordsNormalCsv() (*asset, error) {
	bytes, err := AssetsWordsNormalCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../assets/words/normal.csv", size: 4250, mode: os.FileMode(438), modTime: time.Unix(1610456299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../assets/words/normal.csv": AssetsWordsNormalCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"words": &bintree{nil, map[string]*bintree{
					"normal.csv": &bintree{AssetsWordsNormalCsv, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
