// source: games.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.distributed_codenames.Card', null, global);
goog.exportSymbol('proto.distributed_codenames.Clue', null, global);
goog.exportSymbol('proto.distributed_codenames.Color', null, global);
goog.exportSymbol('proto.distributed_codenames.CreateGameRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.CreateGameResponse', null, global);
goog.exportSymbol('proto.distributed_codenames.Game', null, global);
goog.exportSymbol('proto.distributed_codenames.GetGameRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.GetGameResponse', null, global);
goog.exportSymbol('proto.distributed_codenames.GuessRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.GuessResponse', null, global);
goog.exportSymbol('proto.distributed_codenames.HintRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.HintResponse', null, global);
goog.exportSymbol('proto.distributed_codenames.PlayAgainRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.PlayAgainResponse', null, global);
goog.exportSymbol('proto.distributed_codenames.Player', null, global);
goog.exportSymbol('proto.distributed_codenames.SkipTurnRequest', null, global);
goog.exportSymbol('proto.distributed_codenames.SkipTurnResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.Card.displayName = 'proto.distributed_codenames.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.Clue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.Clue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.Clue.displayName = 'proto.distributed_codenames.Clue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.distributed_codenames.Game.repeatedFields_, null);
};
goog.inherits(proto.distributed_codenames.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.Game.displayName = 'proto.distributed_codenames.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.Player.displayName = 'proto.distributed_codenames.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.distributed_codenames.CreateGameRequest.repeatedFields_, null);
};
goog.inherits(proto.distributed_codenames.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.CreateGameRequest.displayName = 'proto.distributed_codenames.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.CreateGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.CreateGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.CreateGameResponse.displayName = 'proto.distributed_codenames.CreateGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.GetGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.GetGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.GetGameRequest.displayName = 'proto.distributed_codenames.GetGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.GetGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.GetGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.GetGameResponse.displayName = 'proto.distributed_codenames.GetGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.GuessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.GuessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.GuessRequest.displayName = 'proto.distributed_codenames.GuessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.GuessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.GuessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.GuessResponse.displayName = 'proto.distributed_codenames.GuessResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.HintRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.HintRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.HintRequest.displayName = 'proto.distributed_codenames.HintRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.HintResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.HintResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.HintResponse.displayName = 'proto.distributed_codenames.HintResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.PlayAgainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.PlayAgainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.PlayAgainRequest.displayName = 'proto.distributed_codenames.PlayAgainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.PlayAgainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.PlayAgainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.PlayAgainResponse.displayName = 'proto.distributed_codenames.PlayAgainResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.SkipTurnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.SkipTurnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.SkipTurnRequest.displayName = 'proto.distributed_codenames.SkipTurnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.distributed_codenames.SkipTurnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.distributed_codenames.SkipTurnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.distributed_codenames.SkipTurnResponse.displayName = 'proto.distributed_codenames.SkipTurnResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, 0),
    revealed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.Card}
 */
proto.distributed_codenames.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.Card;
  return proto.distributed_codenames.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.Card}
 */
proto.distributed_codenames.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {!proto.distributed_codenames.Color} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRevealed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRevealed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string card_id = 1;
 * @return {string}
 */
proto.distributed_codenames.Card.prototype.getCardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Card} returns this
 */
proto.distributed_codenames.Card.prototype.setCardId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.distributed_codenames.Card.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Card} returns this
 */
proto.distributed_codenames.Card.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Color color = 3;
 * @return {!proto.distributed_codenames.Color}
 */
proto.distributed_codenames.Card.prototype.getColor = function() {
  return /** @type {!proto.distributed_codenames.Color} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.distributed_codenames.Color} value
 * @return {!proto.distributed_codenames.Card} returns this
 */
proto.distributed_codenames.Card.prototype.setColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool revealed = 4;
 * @return {boolean}
 */
proto.distributed_codenames.Card.prototype.getRevealed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.distributed_codenames.Card} returns this
 */
proto.distributed_codenames.Card.prototype.setRevealed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.Clue.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.Clue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.Clue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Clue.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.Clue}
 */
proto.distributed_codenames.Clue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.Clue;
  return proto.distributed_codenames.Clue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.Clue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.Clue}
 */
proto.distributed_codenames.Clue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.Clue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.Clue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.Clue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Clue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.distributed_codenames.Clue.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Clue} returns this
 */
proto.distributed_codenames.Clue.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.distributed_codenames.Clue.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.distributed_codenames.Clue} returns this
 */
proto.distributed_codenames.Clue.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.distributed_codenames.Game.repeatedFields_ = [3,5,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blueTeamList: jspb.Message.toObjectList(msg.getBlueTeamList(),
    proto.distributed_codenames.Player.toObject, includeInstance),
    blueTeamSpymaster: jspb.Message.getFieldWithDefault(msg, 4, ""),
    redTeamList: jspb.Message.toObjectList(msg.getRedTeamList(),
    proto.distributed_codenames.Player.toObject, includeInstance),
    redTeamSpymaster: jspb.Message.getFieldWithDefault(msg, 6, ""),
    boardList: jspb.Message.toObjectList(msg.getBoardList(),
    proto.distributed_codenames.Card.toObject, includeInstance),
    keyList: jspb.Message.toObjectList(msg.getKeyList(),
    proto.distributed_codenames.Card.toObject, includeInstance),
    guessing: jspb.Message.getFieldWithDefault(msg, 9, ""),
    clue: (f = msg.getClue()) && proto.distributed_codenames.Clue.toObject(includeInstance, f),
    winner: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.Game}
 */
proto.distributed_codenames.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.Game;
  return proto.distributed_codenames.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.Game}
 */
proto.distributed_codenames.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    case 3:
      var value = new proto.distributed_codenames.Player;
      reader.readMessage(value,proto.distributed_codenames.Player.deserializeBinaryFromReader);
      msg.addBlueTeam(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlueTeamSpymaster(value);
      break;
    case 5:
      var value = new proto.distributed_codenames.Player;
      reader.readMessage(value,proto.distributed_codenames.Player.deserializeBinaryFromReader);
      msg.addRedTeam(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedTeamSpymaster(value);
      break;
    case 7:
      var value = new proto.distributed_codenames.Card;
      reader.readMessage(value,proto.distributed_codenames.Card.deserializeBinaryFromReader);
      msg.addBoard(value);
      break;
    case 8:
      var value = new proto.distributed_codenames.Card;
      reader.readMessage(value,proto.distributed_codenames.Card.deserializeBinaryFromReader);
      msg.addKey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuessing(value);
      break;
    case 10:
      var value = new proto.distributed_codenames.Clue;
      reader.readMessage(value,proto.distributed_codenames.Clue.deserializeBinaryFromReader);
      msg.setClue(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlueTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.distributed_codenames.Player.serializeBinaryToWriter
    );
  }
  f = message.getBlueTeamSpymaster();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRedTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.distributed_codenames.Player.serializeBinaryToWriter
    );
  }
  f = message.getRedTeamSpymaster();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBoardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.distributed_codenames.Card.serializeBinaryToWriter
    );
  }
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.distributed_codenames.Card.serializeBinaryToWriter
    );
  }
  f = message.getGuessing();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getClue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.distributed_codenames.Clue.serializeBinaryToWriter
    );
  }
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host_id = 2;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setHostId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Player blue_team = 3;
 * @return {!Array<!proto.distributed_codenames.Player>}
 */
proto.distributed_codenames.Game.prototype.getBlueTeamList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Player, 3));
};


/**
 * @param {!Array<!proto.distributed_codenames.Player>} value
 * @return {!proto.distributed_codenames.Game} returns this
*/
proto.distributed_codenames.Game.prototype.setBlueTeamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.distributed_codenames.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.Game.prototype.addBlueTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.distributed_codenames.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.clearBlueTeamList = function() {
  return this.setBlueTeamList([]);
};


/**
 * optional string blue_team_spymaster = 4;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getBlueTeamSpymaster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setBlueTeamSpymaster = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Player red_team = 5;
 * @return {!Array<!proto.distributed_codenames.Player>}
 */
proto.distributed_codenames.Game.prototype.getRedTeamList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Player, 5));
};


/**
 * @param {!Array<!proto.distributed_codenames.Player>} value
 * @return {!proto.distributed_codenames.Game} returns this
*/
proto.distributed_codenames.Game.prototype.setRedTeamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.distributed_codenames.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.Game.prototype.addRedTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.distributed_codenames.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.clearRedTeamList = function() {
  return this.setRedTeamList([]);
};


/**
 * optional string red_team_spymaster = 6;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getRedTeamSpymaster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setRedTeamSpymaster = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Card board = 7;
 * @return {!Array<!proto.distributed_codenames.Card>}
 */
proto.distributed_codenames.Game.prototype.getBoardList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Card, 7));
};


/**
 * @param {!Array<!proto.distributed_codenames.Card>} value
 * @return {!proto.distributed_codenames.Game} returns this
*/
proto.distributed_codenames.Game.prototype.setBoardList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.distributed_codenames.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Card}
 */
proto.distributed_codenames.Game.prototype.addBoard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.distributed_codenames.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.clearBoardList = function() {
  return this.setBoardList([]);
};


/**
 * repeated Card key = 8;
 * @return {!Array<!proto.distributed_codenames.Card>}
 */
proto.distributed_codenames.Game.prototype.getKeyList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Card, 8));
};


/**
 * @param {!Array<!proto.distributed_codenames.Card>} value
 * @return {!proto.distributed_codenames.Game} returns this
*/
proto.distributed_codenames.Game.prototype.setKeyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.distributed_codenames.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Card}
 */
proto.distributed_codenames.Game.prototype.addKey = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.distributed_codenames.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.clearKeyList = function() {
  return this.setKeyList([]);
};


/**
 * optional string guessing = 9;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getGuessing = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setGuessing = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Clue clue = 10;
 * @return {?proto.distributed_codenames.Clue}
 */
proto.distributed_codenames.Game.prototype.getClue = function() {
  return /** @type{?proto.distributed_codenames.Clue} */ (
    jspb.Message.getWrapperField(this, proto.distributed_codenames.Clue, 10));
};


/**
 * @param {?proto.distributed_codenames.Clue|undefined} value
 * @return {!proto.distributed_codenames.Game} returns this
*/
proto.distributed_codenames.Game.prototype.setClue = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.clearClue = function() {
  return this.setClue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.distributed_codenames.Game.prototype.hasClue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string winner = 11;
 * @return {string}
 */
proto.distributed_codenames.Game.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Game} returns this
 */
proto.distributed_codenames.Game.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.Player;
  return proto.distributed_codenames.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.distributed_codenames.Player.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Player} returns this
 */
proto.distributed_codenames.Player.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.distributed_codenames.Player.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.Player} returns this
 */
proto.distributed_codenames.Player.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.distributed_codenames.CreateGameRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blueTeamList: jspb.Message.toObjectList(msg.getBlueTeamList(),
    proto.distributed_codenames.Player.toObject, includeInstance),
    redTeamList: jspb.Message.toObjectList(msg.getRedTeamList(),
    proto.distributed_codenames.Player.toObject, includeInstance),
    vocabularyId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.CreateGameRequest}
 */
proto.distributed_codenames.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.CreateGameRequest;
  return proto.distributed_codenames.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.CreateGameRequest}
 */
proto.distributed_codenames.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    case 2:
      var value = new proto.distributed_codenames.Player;
      reader.readMessage(value,proto.distributed_codenames.Player.deserializeBinaryFromReader);
      msg.addBlueTeam(value);
      break;
    case 3:
      var value = new proto.distributed_codenames.Player;
      reader.readMessage(value,proto.distributed_codenames.Player.deserializeBinaryFromReader);
      msg.addRedTeam(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVocabularyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlueTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.distributed_codenames.Player.serializeBinaryToWriter
    );
  }
  f = message.getRedTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.distributed_codenames.Player.serializeBinaryToWriter
    );
  }
  f = message.getVocabularyId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string host_id = 1;
 * @return {string}
 */
proto.distributed_codenames.CreateGameRequest.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
 */
proto.distributed_codenames.CreateGameRequest.prototype.setHostId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Player blue_team = 2;
 * @return {!Array<!proto.distributed_codenames.Player>}
 */
proto.distributed_codenames.CreateGameRequest.prototype.getBlueTeamList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Player, 2));
};


/**
 * @param {!Array<!proto.distributed_codenames.Player>} value
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
*/
proto.distributed_codenames.CreateGameRequest.prototype.setBlueTeamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.distributed_codenames.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.CreateGameRequest.prototype.addBlueTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.distributed_codenames.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
 */
proto.distributed_codenames.CreateGameRequest.prototype.clearBlueTeamList = function() {
  return this.setBlueTeamList([]);
};


/**
 * repeated Player red_team = 3;
 * @return {!Array<!proto.distributed_codenames.Player>}
 */
proto.distributed_codenames.CreateGameRequest.prototype.getRedTeamList = function() {
  return /** @type{!Array<!proto.distributed_codenames.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.distributed_codenames.Player, 3));
};


/**
 * @param {!Array<!proto.distributed_codenames.Player>} value
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
*/
proto.distributed_codenames.CreateGameRequest.prototype.setRedTeamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.distributed_codenames.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.distributed_codenames.Player}
 */
proto.distributed_codenames.CreateGameRequest.prototype.addRedTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.distributed_codenames.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
 */
proto.distributed_codenames.CreateGameRequest.prototype.clearRedTeamList = function() {
  return this.setRedTeamList([]);
};


/**
 * optional string vocabulary_id = 4;
 * @return {string}
 */
proto.distributed_codenames.CreateGameRequest.prototype.getVocabularyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.CreateGameRequest} returns this
 */
proto.distributed_codenames.CreateGameRequest.prototype.setVocabularyId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.CreateGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.CreateGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.CreateGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.CreateGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.CreateGameResponse}
 */
proto.distributed_codenames.CreateGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.CreateGameResponse;
  return proto.distributed_codenames.CreateGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.CreateGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.CreateGameResponse}
 */
proto.distributed_codenames.CreateGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.CreateGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.CreateGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.CreateGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.CreateGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.CreateGameResponse.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.CreateGameResponse} returns this
 */
proto.distributed_codenames.CreateGameResponse.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.GetGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.GetGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.GetGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GetGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.GetGameRequest}
 */
proto.distributed_codenames.GetGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.GetGameRequest;
  return proto.distributed_codenames.GetGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.GetGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.GetGameRequest}
 */
proto.distributed_codenames.GetGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.GetGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.GetGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.GetGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GetGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.GetGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.GetGameRequest} returns this
 */
proto.distributed_codenames.GetGameRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.GetGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.GetGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.GetGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GetGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.distributed_codenames.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.GetGameResponse}
 */
proto.distributed_codenames.GetGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.GetGameResponse;
  return proto.distributed_codenames.GetGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.GetGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.GetGameResponse}
 */
proto.distributed_codenames.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.distributed_codenames.Game;
      reader.readMessage(value,proto.distributed_codenames.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.GetGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.GetGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.GetGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GetGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.distributed_codenames.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.distributed_codenames.Game}
 */
proto.distributed_codenames.GetGameResponse.prototype.getGame = function() {
  return /** @type{?proto.distributed_codenames.Game} */ (
    jspb.Message.getWrapperField(this, proto.distributed_codenames.Game, 1));
};


/**
 * @param {?proto.distributed_codenames.Game|undefined} value
 * @return {!proto.distributed_codenames.GetGameResponse} returns this
*/
proto.distributed_codenames.GetGameResponse.prototype.setGame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.distributed_codenames.GetGameResponse} returns this
 */
proto.distributed_codenames.GetGameResponse.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.distributed_codenames.GetGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.GuessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.GuessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.GuessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GuessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.GuessRequest}
 */
proto.distributed_codenames.GuessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.GuessRequest;
  return proto.distributed_codenames.GuessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.GuessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.GuessRequest}
 */
proto.distributed_codenames.GuessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.GuessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.GuessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.GuessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GuessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.GuessRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.GuessRequest} returns this
 */
proto.distributed_codenames.GuessRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.distributed_codenames.GuessRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.GuessRequest} returns this
 */
proto.distributed_codenames.GuessRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string card_id = 3;
 * @return {string}
 */
proto.distributed_codenames.GuessRequest.prototype.getCardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.GuessRequest} returns this
 */
proto.distributed_codenames.GuessRequest.prototype.setCardId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.GuessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.GuessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.GuessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GuessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.GuessResponse}
 */
proto.distributed_codenames.GuessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.GuessResponse;
  return proto.distributed_codenames.GuessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.GuessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.GuessResponse}
 */
proto.distributed_codenames.GuessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.GuessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.GuessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.GuessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.GuessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.HintRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.HintRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.HintRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.HintRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clue: (f = msg.getClue()) && proto.distributed_codenames.Clue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.HintRequest}
 */
proto.distributed_codenames.HintRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.HintRequest;
  return proto.distributed_codenames.HintRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.HintRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.HintRequest}
 */
proto.distributed_codenames.HintRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 3:
      var value = new proto.distributed_codenames.Clue;
      reader.readMessage(value,proto.distributed_codenames.Clue.deserializeBinaryFromReader);
      msg.setClue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.HintRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.HintRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.HintRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.HintRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.distributed_codenames.Clue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.HintRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.HintRequest} returns this
 */
proto.distributed_codenames.HintRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.distributed_codenames.HintRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.HintRequest} returns this
 */
proto.distributed_codenames.HintRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Clue clue = 3;
 * @return {?proto.distributed_codenames.Clue}
 */
proto.distributed_codenames.HintRequest.prototype.getClue = function() {
  return /** @type{?proto.distributed_codenames.Clue} */ (
    jspb.Message.getWrapperField(this, proto.distributed_codenames.Clue, 3));
};


/**
 * @param {?proto.distributed_codenames.Clue|undefined} value
 * @return {!proto.distributed_codenames.HintRequest} returns this
*/
proto.distributed_codenames.HintRequest.prototype.setClue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.distributed_codenames.HintRequest} returns this
 */
proto.distributed_codenames.HintRequest.prototype.clearClue = function() {
  return this.setClue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.distributed_codenames.HintRequest.prototype.hasClue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.HintResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.HintResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.HintResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.HintResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.HintResponse}
 */
proto.distributed_codenames.HintResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.HintResponse;
  return proto.distributed_codenames.HintResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.HintResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.HintResponse}
 */
proto.distributed_codenames.HintResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.HintResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.HintResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.HintResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.HintResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.PlayAgainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.PlayAgainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.PlayAgainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.PlayAgainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.PlayAgainRequest}
 */
proto.distributed_codenames.PlayAgainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.PlayAgainRequest;
  return proto.distributed_codenames.PlayAgainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.PlayAgainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.PlayAgainRequest}
 */
proto.distributed_codenames.PlayAgainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.PlayAgainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.PlayAgainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.PlayAgainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.PlayAgainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.PlayAgainRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.PlayAgainRequest} returns this
 */
proto.distributed_codenames.PlayAgainRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.distributed_codenames.PlayAgainRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.PlayAgainRequest} returns this
 */
proto.distributed_codenames.PlayAgainRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.PlayAgainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.PlayAgainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.PlayAgainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.PlayAgainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.PlayAgainResponse}
 */
proto.distributed_codenames.PlayAgainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.PlayAgainResponse;
  return proto.distributed_codenames.PlayAgainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.PlayAgainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.PlayAgainResponse}
 */
proto.distributed_codenames.PlayAgainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.PlayAgainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.PlayAgainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.PlayAgainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.PlayAgainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.SkipTurnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.SkipTurnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.SkipTurnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.SkipTurnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.SkipTurnRequest}
 */
proto.distributed_codenames.SkipTurnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.SkipTurnRequest;
  return proto.distributed_codenames.SkipTurnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.SkipTurnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.SkipTurnRequest}
 */
proto.distributed_codenames.SkipTurnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.SkipTurnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.SkipTurnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.SkipTurnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.SkipTurnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.distributed_codenames.SkipTurnRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.SkipTurnRequest} returns this
 */
proto.distributed_codenames.SkipTurnRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_id = 2;
 * @return {string}
 */
proto.distributed_codenames.SkipTurnRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.distributed_codenames.SkipTurnRequest} returns this
 */
proto.distributed_codenames.SkipTurnRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.distributed_codenames.SkipTurnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.distributed_codenames.SkipTurnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.distributed_codenames.SkipTurnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.SkipTurnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.distributed_codenames.SkipTurnResponse}
 */
proto.distributed_codenames.SkipTurnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.distributed_codenames.SkipTurnResponse;
  return proto.distributed_codenames.SkipTurnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.distributed_codenames.SkipTurnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.distributed_codenames.SkipTurnResponse}
 */
proto.distributed_codenames.SkipTurnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.distributed_codenames.SkipTurnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.distributed_codenames.SkipTurnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.distributed_codenames.SkipTurnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.distributed_codenames.SkipTurnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.distributed_codenames.Color = {
  UNKNOWN_COLOR: 0,
  BLUE: 1,
  RED: 2,
  BEIGE: 3,
  BLACK: 4
};

goog.object.extend(exports, proto.distributed_codenames);
